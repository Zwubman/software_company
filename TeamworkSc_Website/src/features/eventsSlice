import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  events: [],
  loading: false,
  success: false,
  message: "",
  totalEvents: 0,
  upcomingEvents: 0,
  complatedEvents: 0,
  onGoingEvents: 0,
  page: 1,
};

const eventsSlice = createSlice({
  name: "events",
  initialState,
  reducers: {
    loading: (state, action) => {
      state.loading = action.payload;
      state.success = false;
      state.message = "";
      return state;
    },
    addAllEventsToStore: (state, action) => {
      state.events = action.payload.events.Events;
      state.loading = false;
      state.totalEvents = action.payload.events.total;
      // state.onGoingEvents = action.payload.statistics.onGoingEvents;
      // state.upcomingEvents = action.payload.statistics.upcomingEvents;
      // state.upcomingEvents = action.payload.statistics.upcomingEvents;
      // state.page = action.payload.statistics.page;
      state.success = action.payload.success;
      state.message = action.payload.message;
      return state;
    },
    addEventsToStore: (state, action) => {
      state.events = [action.payload, ...state.events];
      state.loading = false;
      state.onGoingEvents = state.onGoingEvents + 1;
      state.upcomingEvents = state.upcomingEvents + 1;
      state.upcomingEvents = state.upcomingEvents + 1;
      state.totalEvents = state.totalEvents + 1;
      state.success = action.payload.success;
      state.message = action.payload.message;
      return state;
    },
    deleteEventsFromStore: (state, action) => {
      state.events = state.events.filter(
        (event) => event.id !== action.payload
      );
      state.loading = false;
      state.totalEvents = state.totalEvents > 0 && state.totalEvents - 1;
      state.onGoingEvents = state.onGoingEvents > 0 && state.onGoingEvents - 1;
      state.upcomingEvents =
        state.upcomingEvents > 0 && state.upcomingEvents - 1;
      state.upcomingEvents =
        state.upcomingEvents > 0 && state.upcomingEvents - 1;
      return state;
    },
    updateEventsInStore: (state, action) => {
      // console.log(action);
      const updatedEvents = state.events.map((event) =>
        event.id === action.payload.id ? action.payload : event
      );
      state.events = updatedEvents;
      state.loading = false;
      state.success = action.payload.success;
      state.message = action.payload.message;
      return state;
    },
  },
});
export const {
  addEventsToStore,
  updateEventsInStore,
  loading,
  addAllEventsToStore,
  deleteEventsFromStore,
} = eventsSlice.actions;
export default eventsSlice.reducer;
